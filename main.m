%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Scripts for (curve) clustering with Regression Mixtures (polynomial, spline, B-spline, with mixed random effects)% and the robust EM algorithm. The algorithm simultaneously estimates the model parameters, and the% number of mixture components, by a regularized likelihood estimation approach.%% Written by Faicel Chamroukhi, December 2012% updated: april 2014 (added, random effect mixtures)%% Please cite the following papers and this code when using it:% - F. Chamroukhi. Unsupervised learning of regression mixture models with unknown number of%   components. Journal of Statistical Computation and Simulation Taylor & Francis Online., Vol. 86,%   pages:2308-2334, Nov, 2016% - F. Chamroukhi. Robust EM algorithm for model-based curve clustering., pages:1?8, August, 2013,%   Proceedings of the International Joint Conference on Neural Networks (IJCNN), IEEE%% (c) by F. Chamroukhi%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%clear all;close all;clc;set(0,'defaultaxesfontsize',15);%%%%%%%%%%%%%%%%%%%%%%%%                     %% choose a model type %%                     %%%%%%%%%%%%%%%%%%%%%%%%% with fixed effectsmodel = 'PRM'; model = 'SRM';  model = 'bSRM';% % with random effects% model = 'RE-PRM';% model = 'RE-SRM';% model = 'RE-bSRM';%%%%%%%%%%%%%%%%%%%%%%%                    %%  choose a data set %%                    %%%%%%%%%%%%%%%%%%%%%%%data = 'toy-nonlin';dataname = 'toy-nonlin';% data = 'waveform';dataname = 'waveform';% data = 'satellite';dataname = 'satellite';% data = 'yeast-cellcycle'; dataname = 'yeast-cellcycle';data = 'phonemes'; dataname = 'phonemes';[Y klas] = load_functional_dataset(data);[n, m]=size(Y);x = linspace(0,1,m);%[1:m]/m;1:m;%% plot the datafigureplot(x,Y');ylabel('y')xlabel('x')title('orignal functional data');box on;% model specificationp            = 5; % polynomial regression degree, for the polynomial regression mixture modelspline_order = 4; % 2: linear, 3: qudratic, etc, for (b-)spline regression mixtures modelsnknots       = 10; % number of internal knots, for (b-)spline regression mixtures modelssave_reuslts = 0;ticswitch model    case 'PRM'        [klas_hat, params, posterior_prob, gmm, stored_K, stored_J] = robust_em_PRM(x, Y, p);            case 'SRM'        [klas_hat, params, posterior_prob, gmm, stored_K, stored_J] = robust_em_PSRM(x, Y, spline_order, 'spline', nknots);        case 'bSRM'        [klas_hat, params, posterior_prob, gmm, stored_K, stored_J] = robust_em_PSRM(x, Y, spline_order, 'B-spline', nknots);   %% these three last extensions are not yet published         case 'RE-PRM'        [klas_hat, params, posterior_prob, gmm, stored_K, stored_J] = robust_em_RE_PRM(x, Y, p);%         [klas_hat, params, posterior_prob, gmm, stored_J] = em_RE_PRM(x, Y,6, p);            case 'RE-SRM'        [klas_hat, params, posterior_prob, gmm, stored_K, stored_J] = robust_em_RE_PSRM(x, Y, spline_order, 'spline', nknots);            case 'RE-bSRM'        [klas_hat, params, posterior_prob, gmm, stored_K, stored_J] = robust_em_RE_PbSRM(x, Y, spline_order, 'B-spline', nknots);            otherwise        error('Unknown chosen model');endt=tocK_hat = max(klas_hat); % stored_K(end);plot_results_robust_em_RM(Y, K_hat, klas_hat, params, posterior_prob, gmm, stored_J, stored_K);%% save resultsif save_reusltsfolder_Results = ['./results/',dataname,'/',model];cmd = ['cd ./', folder_Results];eval(cmd);save klas_hat klas_hat;save params params;save posterior_prob posterior_prob;save gmm gmm;save stored_K;save stored_K;save stored_J stored_K;% save Figurescmd1 = ['saveas(1',',''',dataname,'-data',''',''fig''',')'];cmd2 = ['saveas(1',',''',dataname,'-data',''',''epsc''',')'];eval(cmd1);eval(cmd2);for k=1:K_hat    cmd1 = ['saveas(',int2str(k+1),',''',dataname,'-RobustEM-',model,'-cluster-',int2str(k),''',''fig''',')'];    cmd2 = ['saveas(',int2str(k+1),',''',dataname,'-RobustEM-',model,'-cluster-',int2str(k),''',''epsc''',')'];    eval(cmd1);    eval(cmd2);endcmd1 = ['saveas(',int2str(K_hat+2),',''',dataname,'-RobustEM-',model,'-patrtition'',''fig''',')'];cmd2 = ['saveas(',int2str(K_hat+2),',''',dataname,'-RobustEM-',model,'-patrtition'',''epsc''',')'];eval(cmd1);eval(cmd2);cmd1 = ['saveas(',int2str(K_hat+3),',''',dataname,'-RobustEM-',model,'-clusters'',''fig''',')'];cmd2 = ['saveas(',int2str(K_hat+3),',''',dataname,'-RobustEM-',model,'-clusters'',''epsc''',')'];eval(cmd1);eval(cmd2);cmd1 = ['saveas(',int2str(K_hat+4),',''',dataname,'-RobustEM-',model,'-penLikelihood'',''fig''',')'];cmd2 = ['saveas(',int2str(K_hat+4),',''',dataname,'-RobustEM-',model,'-penLikelihood'',''epsc''',')'];eval(cmd1);eval(cmd2);cmd1 = ['saveas(',int2str(K_hat+5),',''',dataname,'-RobustEM-',model,'-stored_K'',''fig''',')'];cmd2 = ['saveas(',int2str(K_hat+5),',''',dataname,'-RobustEM-',model,'-stored_K'',''epsc''',')'];eval(cmd1);eval(cmd2);cd ../../../;end